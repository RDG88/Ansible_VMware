---
- name: Running task....
  hosts: localhost
  gather_facts: no
  vars:
    username: 'Username'
    password: 'Password'
    domain: 'LAB'
    connectionserver: 'lab-vmcs-01.fqdn.nl'
    desktop_pool: 'W10-IC-DC01'

  tasks:
    - name: Login to Horizon and Get Desktop pool ID
      ansible.builtin.uri:
        url: "https://{{ connectionserver }}/rest/login"
        validate_certs: false
        status_code: 200
        method: POST
        body_format: json
        body:
          username: "{{ username }}"
          password: "{{ password }}"
          domain: "{{ domain }}"
      register: login_response

    - name: Get Desktop pools
      ansible.builtin.uri:
        url: "https://{{ connectionserver }}/rest/inventory/v1/desktop-pools"
        validate_certs: false
        status_code: 200
        method: GET
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ login_response.json.access_token }}"
      register: desktop_pools_response

    - name: Set desktop pool ID
      set_fact:
        desktop_pool_id: "{{ desktop_pools_response.json | json_query(query) | first }}"
      vars:
        query: "[?name == '{{ desktop_pool }}'].id"
      failed_when: desktop_pool_id is none

    - name: Define filter expression
      set_fact:
        filter_expression: >
          {
            "type": "And",
            "filters": [
              {
                "type": "Equals",
                "name": "desktop_pool_id",
                "value": "{{ desktop_pool_id }}"
              }
            ]
          }
    - name: Debug filter_expression
      debug:
        var: filter_expression

    - name: Get Desktop pool vm details filtert on poolid
      ansible.builtin.uri:
        url: 'https://{{ connectionserver }}/rest/inventory/v1/machines?filter={{ filter_expression | to_json | urlencode }}'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ login_response.json.access_token }}"
      register: vmdetails_poolid
    - name: Debug vmdetails_poolid
      debug:
        var: vmdetails_poolid.json

    - name: Extract IDs from VM details
      set_fact:
        vm_ids: "{{ vmdetails_poolid.json | json_query('[*].id') }}"

    - name: Debug VM IDs
      debug:
        var: vm_ids

    - name: Check if VM IDs list is empty
      fail:
        msg: "The pool is empty already, no VMs to delete."
      when: vm_ids | length == 0

    - name: Delete VMs based on fetched IDs
      ansible.builtin.uri:
        url: "https://{{ connectionserver }}/rest/inventory/v1/machines"
        method: DELETE
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ login_response.json.access_token }}"
        body_format: json
        body: "{{ {'machine_ids': vm_ids} | to_json }}"
        status_code: 200
      register: delete_response
      when: vm_ids | length > 0

    - name: Debug delete response
      debug:
        var: delete_response

    - name: Keep checking until pool is empty
      ansible.builtin.uri:
        url: 'https://{{ connectionserver }}/rest/inventory/v1/machines?filter={{ filter_expression | to_json | urlencode }}'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ login_response.json.access_token }}"
        return_content: yes
      register: api_response
      until: api_response.json == []
      retries: 600  # Maximum number of attempts
      delay: 10  # Delay in seconds between attempts
